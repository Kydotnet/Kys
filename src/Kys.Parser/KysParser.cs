//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from KysParser.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Kys.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class KysParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BASH=1, COMMENT=2, Kvar=3, Kset=4, Kdef=5, Kfunc=6, Kexit=7, Kif=8, Kelse=9, 
		Kwhile=10, Ktimed=11, Ktimeout=12, Kwait=13, Kfor=14, Kkyl=15, Kkys=16, 
		NULL=17, BOOL=18, ID=19, GID=20, RID=21, STRING=22, NUMBER=23, UNIARIT=24, 
		POTENCIALASSIGN=25, POTENCIAL=26, MULTIPLICATIVEASSIGN=27, MULTIPLICATIVE=28, 
		MODULEASSIGN=29, ADITIVEASSIGN=30, ADITIVE=31, EQRELATIONAL=32, RELATIONAL=33, 
		EQUALITY=34, ANDOR=35, PARAMS=36, Sless=37, Sgreat=38, Smod=39, Spot=40, 
		Sroot=41, Sdiv=42, Smul=43, Splus=44, Sminus=45, Scomma=46, Sdot=47, Sor=48, 
		Sand=49, Snot=50, SRpar=51, SLpar=52, SLbrack=53, SRbrack=54, Sequal=55, 
		Sdolar=56, Sarr=57, Scomment=58, Sinstruction=59, SC=60, WS=61, ALL=62;
	public const int
		RULE_program = 0, RULE_toplevel = 1, RULE_kyl = 2, RULE_kys = 3, RULE_instruction = 4, 
		RULE_funcdefinition = 5, RULE_parameters = 6, RULE_params = 7, RULE_exitprogram = 8, 
		RULE_sentence = 9, RULE_control = 10, RULE_ifcontrol = 11, RULE_elsecontrol = 12, 
		RULE_whilecontrol = 13, RULE_twhilecontrol = 14, RULE_waitcontrol = 15, 
		RULE_twbucle = 16, RULE_timeoutcontrol = 17, RULE_forcontrol = 18, RULE_forexpression = 19, 
		RULE_varoperation = 20, RULE_block = 21, RULE_funccall = 22, RULE_funcresult = 23, 
		RULE_arguments = 24, RULE_declaration = 25, RULE_creation = 26, RULE_definition = 27, 
		RULE_asignation = 28, RULE_selfasignation = 29, RULE_expression = 30, 
		RULE_value = 31;
	public static readonly string[] ruleNames = {
		"program", "toplevel", "kyl", "kys", "instruction", "funcdefinition", 
		"parameters", "params", "exitprogram", "sentence", "control", "ifcontrol", 
		"elsecontrol", "whilecontrol", "twhilecontrol", "waitcontrol", "twbucle", 
		"timeoutcontrol", "forcontrol", "forexpression", "varoperation", "block", 
		"funccall", "funcresult", "arguments", "declaration", "creation", "definition", 
		"asignation", "selfasignation", "expression", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'var'", "'set'", "'def'", "'func'", "'exit'", "'if'", 
		"'else'", "'while'", "'timed'", "'timeout'", "'wait'", "'for'", "'kyl'", 
		"'kys'", "'null'", null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'<'", "'>'", 
		"'%'", "'^'", "'~'", "'/'", "'*'", "'+'", "'-'", "','", "'.'", "'||'", 
		"'&&'", "'!'", "')'", "'('", "'{'", "'}'", "'='", "'$'", "'@'", "'//'", 
		"'#!'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BASH", "COMMENT", "Kvar", "Kset", "Kdef", "Kfunc", "Kexit", "Kif", 
		"Kelse", "Kwhile", "Ktimed", "Ktimeout", "Kwait", "Kfor", "Kkyl", "Kkys", 
		"NULL", "BOOL", "ID", "GID", "RID", "STRING", "NUMBER", "UNIARIT", "POTENCIALASSIGN", 
		"POTENCIAL", "MULTIPLICATIVEASSIGN", "MULTIPLICATIVE", "MODULEASSIGN", 
		"ADITIVEASSIGN", "ADITIVE", "EQRELATIONAL", "RELATIONAL", "EQUALITY", 
		"ANDOR", "PARAMS", "Sless", "Sgreat", "Smod", "Spot", "Sroot", "Sdiv", 
		"Smul", "Splus", "Sminus", "Scomma", "Sdot", "Sor", "Sand", "Snot", "SRpar", 
		"SLpar", "SLbrack", "SRbrack", "Sequal", "Sdolar", "Sarr", "Scomment", 
		"Sinstruction", "SC", "WS", "ALL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KysParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static KysParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public KysParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public KysParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ToplevelContext[] toplevel() {
			return GetRuleContexts<ToplevelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ToplevelContext toplevel(int i) {
			return GetRuleContext<ToplevelContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext[] instruction() {
			return GetRuleContexts<InstructionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstructionContext instruction(int i) {
			return GetRuleContext<InstructionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Kkyl || _la==Kkys) {
				{
				{
				State = 64; toplevel();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 70; instruction();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Kvar) | (1L << Kset) | (1L << Kdef) | (1L << Kfunc) | (1L << Kexit) | (1L << Kif) | (1L << Kwhile) | (1L << Ktimed) | (1L << Kwait) | (1L << Kfor) | (1L << ID))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ToplevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KylContext kyl() {
			return GetRuleContext<KylContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KysContext kys() {
			return GetRuleContext<KysContext>(0);
		}
		public ToplevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_toplevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToplevel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ToplevelContext toplevel() {
		ToplevelContext _localctx = new ToplevelContext(Context, State);
		EnterRule(_localctx, 2, RULE_toplevel);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Kkyl:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75; kyl();
				}
				break;
			case Kkys:
				EnterOuterAlt(_localctx, 2);
				{
				State = 76; kys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KylContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kkyl() { return GetToken(KysParser.Kkyl, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KysParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] STRING() { return GetTokens(KysParser.STRING); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING(int i) {
			return GetToken(KysParser.STRING, i);
		}
		public KylContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kyl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKyl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KylContext kyl() {
		KylContext _localctx = new KylContext(Context, State);
		EnterRule(_localctx, 4, RULE_kyl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(Kkyl);
			State = 80; Match(ID);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 81; Match(STRING);
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==STRING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KysContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kkys() { return GetToken(KysParser.Kkys, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KysParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public KysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kys; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKys(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KysContext kys() {
		KysContext _localctx = new KysContext(Context, State);
		EnterRule(_localctx, 6, RULE_kys);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(Kkys);
			State = 87; Match(ID);
			State = 91;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 88; value();
					}
					} 
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExitprogramContext exitprogram() {
			return GetRuleContext<ExitprogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncdefinitionContext funcdefinition() {
			return GetRuleContext<FuncdefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext sentence() {
			return GetRuleContext<SentenceContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 8, RULE_instruction);
		try {
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Kexit:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94; exitprogram();
				}
				break;
			case Kfunc:
				EnterOuterAlt(_localctx, 2);
				{
				State = 95; funcdefinition();
				}
				break;
			case Kvar:
			case Kset:
			case Kdef:
			case Kif:
			case Kwhile:
			case Ktimed:
			case Kwait:
			case Kfor:
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; sentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncdefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kfunc() { return GetToken(KysParser.Kfunc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KysParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLpar() { return GetToken(KysParser.SLpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRpar() { return GetToken(KysParser.SRpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FuncdefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcdefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncdefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncdefinitionContext funcdefinition() {
		FuncdefinitionContext _localctx = new FuncdefinitionContext(Context, State);
		EnterRule(_localctx, 10, RULE_funcdefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(Kfunc);
			State = 100; Match(ID);
			State = 101; Match(SLpar);
			State = 102; parameters();
			State = 103; Match(SRpar);
			State = 104; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAMS() { return GetToken(KysParser.PARAMS, 0); }
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 12, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 106; @params();
				}
			}

			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARAMS) {
				{
				State = 109; Match(PARAMS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(KysParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(KysParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Scomma() { return GetTokens(KysParser.Scomma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Scomma(int i) {
			return GetToken(KysParser.Scomma, i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 14, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; Match(ID);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Scomma) {
				{
				{
				State = 113; Match(Scomma);
				State = 114; Match(ID);
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitprogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kexit() { return GetToken(KysParser.Kexit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(KysParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SC() { return GetToken(KysParser.SC, 0); }
		public ExitprogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitprogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitprogram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitprogramContext exitprogram() {
		ExitprogramContext _localctx = new ExitprogramContext(Context, State);
		EnterRule(_localctx, 16, RULE_exitprogram);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120; Match(Kexit);
			State = 121; Match(NUMBER);
			State = 122; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ControlContext control() {
			return GetRuleContext<ControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunccallContext funccall() {
			return GetRuleContext<FunccallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VaroperationContext varoperation() {
			return GetRuleContext<VaroperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SC() { return GetToken(KysParser.SC, 0); }
		public SentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSentence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SentenceContext sentence() {
		SentenceContext _localctx = new SentenceContext(Context, State);
		EnterRule(_localctx, 18, RULE_sentence);
		try {
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 124; control();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; funccall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 126; varoperation();
				State = 127; Match(SC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfcontrolContext ifcontrol() {
			return GetRuleContext<IfcontrolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhilecontrolContext whilecontrol() {
			return GetRuleContext<WhilecontrolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TwhilecontrolContext twhilecontrol() {
			return GetRuleContext<TwhilecontrolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WaitcontrolContext waitcontrol() {
			return GetRuleContext<WaitcontrolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForcontrolContext forcontrol() {
			return GetRuleContext<ForcontrolContext>(0);
		}
		public ControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_control; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ControlContext control() {
		ControlContext _localctx = new ControlContext(Context, State);
		EnterRule(_localctx, 20, RULE_control);
		try {
			State = 136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Kif:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; ifcontrol();
				}
				break;
			case Kwhile:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; whilecontrol();
				}
				break;
			case Ktimed:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133; twhilecontrol();
				}
				break;
			case Kwait:
				EnterOuterAlt(_localctx, 4);
				{
				State = 134; waitcontrol();
				}
				break;
			case Kfor:
				EnterOuterAlt(_localctx, 5);
				{
				State = 135; forcontrol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfcontrolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kif() { return GetToken(KysParser.Kif, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLpar() { return GetToken(KysParser.SLpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRpar() { return GetToken(KysParser.SRpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElsecontrolContext elsecontrol() {
			return GetRuleContext<ElsecontrolContext>(0);
		}
		public IfcontrolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifcontrol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfcontrol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfcontrolContext ifcontrol() {
		IfcontrolContext _localctx = new IfcontrolContext(Context, State);
		EnterRule(_localctx, 22, RULE_ifcontrol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(Kif);
			State = 139; Match(SLpar);
			State = 140; expression(0);
			State = 141; Match(SRpar);
			State = 142; block();
			State = 144;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 143; elsecontrol();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElsecontrolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kelse() { return GetToken(KysParser.Kelse, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfcontrolContext ifcontrol() {
			return GetRuleContext<IfcontrolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElsecontrolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elsecontrol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElsecontrol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElsecontrolContext elsecontrol() {
		ElsecontrolContext _localctx = new ElsecontrolContext(Context, State);
		EnterRule(_localctx, 24, RULE_elsecontrol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(Kelse);
			State = 149;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 147; ifcontrol();
				}
				break;
			case 2:
				{
				State = 148; block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilecontrolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kwhile() { return GetToken(KysParser.Kwhile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLpar() { return GetToken(KysParser.SLpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRpar() { return GetToken(KysParser.SRpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhilecontrolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilecontrol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhilecontrol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhilecontrolContext whilecontrol() {
		WhilecontrolContext _localctx = new WhilecontrolContext(Context, State);
		EnterRule(_localctx, 26, RULE_whilecontrol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; Match(Kwhile);
			State = 152; Match(SLpar);
			State = 153; expression(0);
			State = 154; Match(SRpar);
			State = 155; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TwhilecontrolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ktimed() { return GetToken(KysParser.Ktimed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kwhile() { return GetToken(KysParser.Kwhile, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TwbucleContext twbucle() {
			return GetRuleContext<TwbucleContext>(0);
		}
		public TwhilecontrolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_twhilecontrol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTwhilecontrol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TwhilecontrolContext twhilecontrol() {
		TwhilecontrolContext _localctx = new TwhilecontrolContext(Context, State);
		EnterRule(_localctx, 28, RULE_twhilecontrol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(Ktimed);
			State = 158; Match(Kwhile);
			State = 159; twbucle();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WaitcontrolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kwait() { return GetToken(KysParser.Kwait, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TwbucleContext twbucle() {
			return GetRuleContext<TwbucleContext>(0);
		}
		public WaitcontrolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_waitcontrol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWaitcontrol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WaitcontrolContext waitcontrol() {
		WaitcontrolContext _localctx = new WaitcontrolContext(Context, State);
		EnterRule(_localctx, 30, RULE_waitcontrol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(Kwait);
			State = 162; twbucle();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TwbucleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLpar() { return GetToken(KysParser.SLpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Scomma() { return GetToken(KysParser.Scomma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(KysParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRpar() { return GetToken(KysParser.SRpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeoutcontrolContext timeoutcontrol() {
			return GetRuleContext<TimeoutcontrolContext>(0);
		}
		public TwbucleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_twbucle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTwbucle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TwbucleContext twbucle() {
		TwbucleContext _localctx = new TwbucleContext(Context, State);
		EnterRule(_localctx, 32, RULE_twbucle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(SLpar);
			State = 165; expression(0);
			State = 166; Match(Scomma);
			State = 167; Match(NUMBER);
			State = 168; Match(SRpar);
			State = 169; block();
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 170; timeoutcontrol();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeoutcontrolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ktimeout() { return GetToken(KysParser.Ktimeout, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLpar() { return GetToken(KysParser.SLpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(KysParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRpar() { return GetToken(KysParser.SRpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public TimeoutcontrolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeoutcontrol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeoutcontrol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeoutcontrolContext timeoutcontrol() {
		TimeoutcontrolContext _localctx = new TimeoutcontrolContext(Context, State);
		EnterRule(_localctx, 34, RULE_timeoutcontrol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(Ktimeout);
			State = 174; Match(SLpar);
			State = 175; Match(NUMBER);
			State = 176; Match(SRpar);
			State = 177; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForcontrolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kfor() { return GetToken(KysParser.Kfor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLpar() { return GetToken(KysParser.SLpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SC() { return GetTokens(KysParser.SC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SC(int i) {
			return GetToken(KysParser.SC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRpar() { return GetToken(KysParser.SRpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VaroperationContext varoperation() {
			return GetRuleContext<VaroperationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForexpressionContext forexpression() {
			return GetRuleContext<ForexpressionContext>(0);
		}
		public ForcontrolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forcontrol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForcontrol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForcontrolContext forcontrol() {
		ForcontrolContext _localctx = new ForcontrolContext(Context, State);
		EnterRule(_localctx, 36, RULE_forcontrol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; Match(Kfor);
			State = 180; Match(SLpar);
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Kvar) | (1L << Kset) | (1L << Kdef) | (1L << ID))) != 0)) {
				{
				State = 181; varoperation();
				}
			}

			State = 184; Match(SC);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NULL) | (1L << BOOL) | (1L << ID) | (1L << STRING) | (1L << NUMBER) | (1L << Snot) | (1L << SLpar))) != 0)) {
				{
				State = 185; expression(0);
				}
			}

			State = 188; Match(SC);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Kvar) | (1L << Kset) | (1L << Kdef) | (1L << NULL) | (1L << BOOL) | (1L << ID) | (1L << STRING) | (1L << NUMBER) | (1L << Snot) | (1L << SLpar))) != 0)) {
				{
				State = 189; forexpression();
				}
			}

			State = 192; Match(SRpar);
			State = 193; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForexpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VaroperationContext varoperation() {
			return GetRuleContext<VaroperationContext>(0);
		}
		public ForexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forexpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForexpressionContext forexpression() {
		ForexpressionContext _localctx = new ForexpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_forexpression);
		try {
			State = 197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 195; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 196; varoperation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaroperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreationContext creation() {
			return GetRuleContext<CreationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelfasignationContext selfasignation() {
			return GetRuleContext<SelfasignationContext>(0);
		}
		public VaroperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varoperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVaroperation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VaroperationContext varoperation() {
		VaroperationContext _localctx = new VaroperationContext(Context, State);
		EnterRule(_localctx, 40, RULE_varoperation);
		try {
			State = 203;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Kvar:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199; declaration();
				}
				break;
			case Kset:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200; creation();
				}
				break;
			case Kdef:
				EnterOuterAlt(_localctx, 3);
				{
				State = 201; definition();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 202; selfasignation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLbrack() { return GetToken(KysParser.SLbrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRbrack() { return GetToken(KysParser.SRbrack, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext[] sentence() {
			return GetRuleContexts<SentenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SentenceContext sentence(int i) {
			return GetRuleContext<SentenceContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 42, RULE_block);
		int _la;
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SLbrack:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205; Match(SLbrack);
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Kvar) | (1L << Kset) | (1L << Kdef) | (1L << Kif) | (1L << Kwhile) | (1L << Ktimed) | (1L << Kwait) | (1L << Kfor) | (1L << ID))) != 0)) {
					{
					{
					State = 206; sentence();
					}
					}
					State = 211;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 212; Match(SRbrack);
				}
				break;
			case Kvar:
			case Kset:
			case Kdef:
			case Kif:
			case Kwhile:
			case Ktimed:
			case Kwait:
			case Kfor:
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213; sentence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunccallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncresultContext funcresult() {
			return GetRuleContext<FuncresultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SC() { return GetToken(KysParser.SC, 0); }
		public FunccallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funccall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunccall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunccallContext funccall() {
		FunccallContext _localctx = new FunccallContext(Context, State);
		EnterRule(_localctx, 44, RULE_funccall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; funcresult();
			State = 217; Match(SC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncresultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KysParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLpar() { return GetToken(KysParser.SLpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRpar() { return GetToken(KysParser.SRpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public FuncresultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcresult; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncresult(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncresultContext funcresult() {
		FuncresultContext _localctx = new FuncresultContext(Context, State);
		EnterRule(_localctx, 46, RULE_funcresult);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(ID);
			State = 220; Match(SLpar);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NULL) | (1L << BOOL) | (1L << ID) | (1L << STRING) | (1L << NUMBER) | (1L << Snot) | (1L << SLpar))) != 0)) {
				{
				State = 221; arguments();
				}
			}

			State = 224; Match(SRpar);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Scomma() { return GetTokens(KysParser.Scomma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Scomma(int i) {
			return GetToken(KysParser.Scomma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 48, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; expression(0);
			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Scomma) {
				{
				{
				State = 227; Match(Scomma);
				State = 228; expression(0);
				}
				}
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kvar() { return GetToken(KysParser.Kvar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AsignationContext asignation() {
			return GetRuleContext<AsignationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(Kvar);
			State = 235; asignation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kset() { return GetToken(KysParser.Kset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AsignationContext asignation() {
			return GetRuleContext<AsignationContext>(0);
		}
		public CreationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreationContext creation() {
		CreationContext _localctx = new CreationContext(Context, State);
		EnterRule(_localctx, 52, RULE_creation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(Kset);
			State = 238; asignation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Kdef() { return GetToken(KysParser.Kdef, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AsignationContext asignation() {
			return GetRuleContext<AsignationContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 54, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(Kdef);
			State = 241; asignation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsignationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KysParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sequal() { return GetToken(KysParser.Sequal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AsignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asignation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsignation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsignationContext asignation() {
		AsignationContext _localctx = new AsignationContext(Context, State);
		EnterRule(_localctx, 56, RULE_asignation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(ID);
			State = 244; Match(Sequal);
			State = 245; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelfasignationContext : ParserRuleContext {
		public SelfasignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfasignation; } }
	 
		public SelfasignationContext() { }
		public virtual void CopyFrom(SelfasignationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultiplicativeAssignContext : SelfasignationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KysParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATIVEASSIGN() { return GetToken(KysParser.MULTIPLICATIVEASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MultiplicativeAssignContext(SelfasignationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuleAssignContext : SelfasignationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KysParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULEASSIGN() { return GetToken(KysParser.MODULEASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ModuleAssignContext(SelfasignationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleAssignContext : SelfasignationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KysParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Sequal() { return GetToken(KysParser.Sequal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleAssignContext(SelfasignationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditiveAssignContext : SelfasignationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KysParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADITIVEASSIGN() { return GetToken(KysParser.ADITIVEASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AditiveAssignContext(SelfasignationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditiveAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PotencialAssignContext : SelfasignationContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KysParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POTENCIALASSIGN() { return GetToken(KysParser.POTENCIALASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PotencialAssignContext(SelfasignationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPotencialAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelfasignationContext selfasignation() {
		SelfasignationContext _localctx = new SelfasignationContext(Context, State);
		EnterRule(_localctx, 58, RULE_selfasignation);
		try {
			State = 262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				_localctx = new SimpleAssignContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 247; Match(ID);
				State = 248; Match(Sequal);
				State = 249; expression(0);
				}
				break;
			case 2:
				_localctx = new PotencialAssignContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; Match(ID);
				State = 251; Match(POTENCIALASSIGN);
				State = 252; expression(0);
				}
				break;
			case 3:
				_localctx = new MultiplicativeAssignContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 253; Match(ID);
				State = 254; Match(MULTIPLICATIVEASSIGN);
				State = 255; expression(0);
				}
				break;
			case 4:
				_localctx = new ModuleAssignContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 256; Match(ID);
				State = 257; Match(MODULEASSIGN);
				State = 258; expression(0);
				}
				break;
			case 5:
				_localctx = new AditiveAssignContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 259; Match(ID);
				State = 260; Match(ADITIVEASSIGN);
				State = 261; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EqualityExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALITY() { return GetToken(KysParser.EQUALITY, 0); }
		public EqualityExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncresultContext funcresult() {
			return GetRuleContext<FuncresultContext>(0);
		}
		public FuncExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PotencialExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POTENCIAL() { return GetToken(KysParser.POTENCIAL, 0); }
		public PotencialExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPotencialExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AditiveExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADITIVE() { return GetToken(KysParser.ADITIVE, 0); }
		public AditiveExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAditiveExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuleExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Smod() { return GetToken(KysParser.Smod, 0); }
		public ModuleExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqrelationalExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQRELATIONAL() { return GetToken(KysParser.EQRELATIONAL, 0); }
		public EqrelationalExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqrelationalExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLICATIVE() { return GetToken(KysParser.MULTIPLICATIVE, 0); }
		public MultiplicativeExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniNotExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Snot() { return GetToken(KysParser.Snot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UniNotExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniNotExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLpar() { return GetToken(KysParser.SLpar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRpar() { return GetToken(KysParser.SRpar, 0); }
		public ParenthesisExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELATIONAL() { return GetToken(KysParser.RELATIONAL, 0); }
		public RelationalExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANDOR() { return GetToken(KysParser.ANDOR, 0); }
		public LogicalExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ValueExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ValueExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValueExp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UniAritExpContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIARIT() { return GetToken(KysParser.UNIARIT, 0); }
		public UniAritExpContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniAritExp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 273;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				_localctx = new ParenthesisExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 265; Match(SLpar);
				State = 266; expression(0);
				State = 267; Match(SRpar);
				}
				break;
			case 2:
				{
				_localctx = new UniNotExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 269; Match(Snot);
				State = 270; expression(11);
				}
				break;
			case 3:
				{
				_localctx = new FuncExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 271; funcresult();
				}
				break;
			case 4:
				{
				_localctx = new ValueExpContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 272; value();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 303;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 301;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
					case 1:
						{
						_localctx = new PotencialExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 275;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 276; Match(POTENCIAL);
						State = 277; expression(10);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 278;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 279; Match(MULTIPLICATIVE);
						State = 280; expression(10);
						}
						break;
					case 3:
						{
						_localctx = new ModuleExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 281;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 282; Match(Smod);
						State = 283; expression(9);
						}
						break;
					case 4:
						{
						_localctx = new AditiveExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 284;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 285; Match(ADITIVE);
						State = 286; expression(8);
						}
						break;
					case 5:
						{
						_localctx = new RelationalExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 287;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 288; Match(RELATIONAL);
						State = 289; expression(7);
						}
						break;
					case 6:
						{
						_localctx = new EqrelationalExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 290;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 291; Match(EQRELATIONAL);
						State = 292; expression(6);
						}
						break;
					case 7:
						{
						_localctx = new EqualityExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 293;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 294; Match(EQUALITY);
						State = 295; expression(5);
						}
						break;
					case 8:
						{
						_localctx = new LogicalExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 296;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 297; Match(ANDOR);
						State = 298; expression(4);
						}
						break;
					case 9:
						{
						_localctx = new UniAritExpContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 299;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 300; Match(UNIARIT);
						}
						break;
					}
					} 
				}
				State = 305;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL() { return GetToken(KysParser.NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(KysParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(KysParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(KysParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(KysParser.ID, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKysParserVisitor<TResult> typedVisitor = visitor as IKysParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 62, RULE_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NULL) | (1L << BOOL) | (1L << ID) | (1L << STRING) | (1L << NUMBER))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 30: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 10);
		case 1: return Precpred(Context, 9);
		case 2: return Precpred(Context, 8);
		case 3: return Precpred(Context, 7);
		case 4: return Precpred(Context, 6);
		case 5: return Precpred(Context, 5);
		case 6: return Precpred(Context, 4);
		case 7: return Precpred(Context, 3);
		case 8: return Precpred(Context, 12);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '@', '\x137', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x3', '\x2', '\a', '\x2', '\x44', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', 'G', '\v', '\x2', '\x3', '\x2', 
		'\x6', '\x2', 'J', '\n', '\x2', '\r', '\x2', '\xE', '\x2', 'K', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', 'P', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x6', '\x4', 'U', '\n', '\x4', '\r', '\x4', '\xE', 
		'\x4', 'V', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\\', 
		'\n', '\x5', '\f', '\x5', '\xE', '\x5', '_', '\v', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x64', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\b', '\x5', '\b', 'n', '\n', '\b', '\x3', '\b', '\x5', 
		'\b', 'q', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'v', '\n', '\t', '\f', '\t', '\xE', '\t', 'y', '\v', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x84', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x8B', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\x93', '\n', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x98', '\n', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\xAE', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xB9', '\n', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xBD', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x5', '\x14', '\xC1', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xC8', '\n', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\xCE', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xD2', 
		'\n', '\x17', '\f', '\x17', '\xE', '\x17', '\xD5', '\v', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\xD9', '\n', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\xE1', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\xE8', '\n', '\x1A', 
		'\f', '\x1A', '\xE', '\x1A', '\xEB', '\v', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x109', '\n', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x5', ' ', '\x114', '\n', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\a', ' ', '\x130', '\n', ' ', '\f', ' ', '\xE', ' ', '\x133', '\v', 
		' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x2', '\x3', '>', '\"', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x2', '\x3', 
		'\x4', '\x2', '\x13', '\x15', '\x18', '\x19', '\x2', '\x144', '\x2', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'O', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\b', 'X', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x63', '\x3', '\x2', '\x2', '\x2', '\f', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'm', '\x3', '\x2', '\x2', '\x2', '\x10', 'r', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'z', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x16', '\x8A', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x99', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', ' ', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xA6', '\x3', '\x2', '\x2', '\x2', '$', '\xAF', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xB5', '\x3', '\x2', '\x2', '\x2', '(', '\xC7', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xCD', '\x3', '\x2', '\x2', '\x2', ',', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '.', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\x32', '\xE4', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\xEC', '\x3', '\x2', '\x2', '\x2', '\x36', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\xF2', '\x3', '\x2', '\x2', '\x2', ':', 
		'\xF5', '\x3', '\x2', '\x2', '\x2', '<', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x113', '\x3', '\x2', '\x2', '\x2', '@', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x44', '\x5', '\x4', '\x3', '\x2', '\x43', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x46', 'I', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'J', '\x5', '\n', '\x6', '\x2', 'I', 
		'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x3', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x5', '\x6', '\x4', 
		'\x2', 'N', 'P', '\x5', '\b', '\x5', '\x2', 'O', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'P', '\x5', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\a', '\x11', '\x2', '\x2', 'R', 'T', '\a', '\x15', 
		'\x2', '\x2', 'S', 'U', '\a', '\x18', '\x2', '\x2', 'T', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', '\a', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x12', '\x2', '\x2', 'Y', ']', '\a', 
		'\x15', '\x2', '\x2', 'Z', '\\', '\x5', '@', '!', '\x2', '[', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\\', '_', '\x3', '\x2', '\x2', '\x2', ']', '[', 
		'\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', 
		'\t', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x64', '\x5', '\x12', '\n', '\x2', '\x61', '\x64', '\x5', '\f', 
		'\a', '\x2', '\x62', '\x64', '\x5', '\x14', '\v', '\x2', '\x63', '`', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\a', '\b', '\x2', '\x2', '\x66', 'g', '\a', 
		'\x15', '\x2', '\x2', 'g', 'h', '\a', '\x36', '\x2', '\x2', 'h', 'i', 
		'\x5', '\xE', '\b', '\x2', 'i', 'j', '\a', '\x35', '\x2', '\x2', 'j', 
		'k', '\x5', ',', '\x17', '\x2', 'k', '\r', '\x3', '\x2', '\x2', '\x2', 
		'l', 'n', '\x5', '\x10', '\t', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x3', '\x2', '\x2', '\x2', 
		'o', 'q', '\a', '&', '\x2', '\x2', 'p', 'o', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\x3', '\x2', '\x2', '\x2', 'q', '\xF', '\x3', '\x2', '\x2', 
		'\x2', 'r', 'w', '\a', '\x15', '\x2', '\x2', 's', 't', '\a', '\x30', '\x2', 
		'\x2', 't', 'v', '\a', '\x15', '\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'y', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '\t', 
		'\x2', '\x2', '{', '|', '\a', '\x19', '\x2', '\x2', '|', '}', '\a', '>', 
		'\x2', '\x2', '}', '\x13', '\x3', '\x2', '\x2', '\x2', '~', '\x84', '\x5', 
		'\x16', '\f', '\x2', '\x7F', '\x84', '\x5', '.', '\x18', '\x2', '\x80', 
		'\x81', '\x5', '*', '\x16', '\x2', '\x81', '\x82', '\a', '>', '\x2', '\x2', 
		'\x82', '\x84', '\x3', '\x2', '\x2', '\x2', '\x83', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x83', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x83', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x8B', '\x5', '\x18', '\r', '\x2', '\x86', '\x8B', '\x5', '\x1C', 
		'\xF', '\x2', '\x87', '\x8B', '\x5', '\x1E', '\x10', '\x2', '\x88', '\x8B', 
		'\x5', ' ', '\x11', '\x2', '\x89', '\x8B', '\x5', '&', '\x14', '\x2', 
		'\x8A', '\x85', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x17', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '\n', 
		'\x2', '\x2', '\x8D', '\x8E', '\a', '\x36', '\x2', '\x2', '\x8E', '\x8F', 
		'\x5', '>', ' ', '\x2', '\x8F', '\x90', '\a', '\x35', '\x2', '\x2', '\x90', 
		'\x92', '\x5', ',', '\x17', '\x2', '\x91', '\x93', '\x5', '\x1A', '\xE', 
		'\x2', '\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x19', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x97', '\a', '\v', '\x2', '\x2', '\x95', '\x98', '\x5', '\x18', '\r', 
		'\x2', '\x96', '\x98', '\x5', ',', '\x17', '\x2', '\x97', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\a', '\f', '\x2', 
		'\x2', '\x9A', '\x9B', '\a', '\x36', '\x2', '\x2', '\x9B', '\x9C', '\x5', 
		'>', ' ', '\x2', '\x9C', '\x9D', '\a', '\x35', '\x2', '\x2', '\x9D', '\x9E', 
		'\x5', ',', '\x17', '\x2', '\x9E', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA0', '\a', '\r', '\x2', '\x2', '\xA0', '\xA1', '\a', '\f', 
		'\x2', '\x2', '\xA1', '\xA2', '\x5', '\"', '\x12', '\x2', '\xA2', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', '\xF', '\x2', '\x2', 
		'\xA4', '\xA5', '\x5', '\"', '\x12', '\x2', '\xA5', '!', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA7', '\a', '\x36', '\x2', '\x2', '\xA7', '\xA8', 
		'\x5', '>', ' ', '\x2', '\xA8', '\xA9', '\a', '\x30', '\x2', '\x2', '\xA9', 
		'\xAA', '\a', '\x19', '\x2', '\x2', '\xAA', '\xAB', '\a', '\x35', '\x2', 
		'\x2', '\xAB', '\xAD', '\x5', ',', '\x17', '\x2', '\xAC', '\xAE', '\x5', 
		'$', '\x13', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xAE', '\x3', '\x2', '\x2', '\x2', '\xAE', '#', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\a', '\xE', '\x2', '\x2', '\xB0', '\xB1', '\a', 
		'\x36', '\x2', '\x2', '\xB1', '\xB2', '\a', '\x19', '\x2', '\x2', '\xB2', 
		'\xB3', '\a', '\x35', '\x2', '\x2', '\xB3', '\xB4', '\x5', ',', '\x17', 
		'\x2', '\xB4', '%', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\a', 
		'\x10', '\x2', '\x2', '\xB6', '\xB8', '\a', '\x36', '\x2', '\x2', '\xB7', 
		'\xB9', '\x5', '*', '\x16', '\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBC', '\a', '>', '\x2', '\x2', '\xBB', 
		'\xBD', '\x5', '>', ' ', '\x2', '\xBC', '\xBB', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\xC0', '\a', '>', '\x2', '\x2', '\xBF', '\xC1', 
		'\x5', '(', '\x15', '\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC3', '\a', '\x35', '\x2', '\x2', '\xC3', '\xC4', 
		'\x5', ',', '\x17', '\x2', '\xC4', '\'', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC8', '\x5', '>', ' ', '\x2', '\xC6', '\xC8', '\x5', '*', '\x16', '\x2', 
		'\xC7', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC6', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', ')', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCE', 
		'\x5', '\x34', '\x1B', '\x2', '\xCA', '\xCE', '\x5', '\x36', '\x1C', '\x2', 
		'\xCB', '\xCE', '\x5', '\x38', '\x1D', '\x2', '\xCC', '\xCE', '\x5', '<', 
		'\x1F', '\x2', '\xCD', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xCD', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCE', '+', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD3', '\a', '\x37', '\x2', '\x2', '\xD0', '\xD2', 
		'\x5', '\x14', '\v', '\x2', '\xD1', '\xD0', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD6', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xD9', '\a', '\x38', '\x2', '\x2', '\xD7', '\xD9', '\x5', '\x14', 
		'\v', '\x2', '\xD8', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\xD9', '-', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xDB', '\x5', '\x30', '\x19', '\x2', '\xDB', '\xDC', '\a', '>', '\x2', 
		'\x2', '\xDC', '/', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', 
		'\x15', '\x2', '\x2', '\xDE', '\xE0', '\a', '\x36', '\x2', '\x2', '\xDF', 
		'\xE1', '\x5', '\x32', '\x1A', '\x2', '\xE0', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', '\x35', '\x2', '\x2', '\xE3', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE9', '\x5', '>', ' ', '\x2', 
		'\xE5', '\xE6', '\a', '\x30', '\x2', '\x2', '\xE6', '\xE8', '\x5', '>', 
		' ', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', 
		'\a', '\x5', '\x2', '\x2', '\xED', '\xEE', '\x5', ':', '\x1E', '\x2', 
		'\xEE', '\x35', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', '\a', '\x6', 
		'\x2', '\x2', '\xF0', '\xF1', '\x5', ':', '\x1E', '\x2', '\xF1', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', '\a', '\x2', '\x2', 
		'\xF3', '\xF4', '\x5', ':', '\x1E', '\x2', '\xF4', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF6', '\a', '\x15', '\x2', '\x2', '\xF6', '\xF7', 
		'\a', '\x39', '\x2', '\x2', '\xF7', '\xF8', '\x5', '>', ' ', '\x2', '\xF8', 
		';', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', '\x15', '\x2', 
		'\x2', '\xFA', '\xFB', '\a', '\x39', '\x2', '\x2', '\xFB', '\x109', '\x5', 
		'>', ' ', '\x2', '\xFC', '\xFD', '\a', '\x15', '\x2', '\x2', '\xFD', '\xFE', 
		'\a', '\x1B', '\x2', '\x2', '\xFE', '\x109', '\x5', '>', ' ', '\x2', '\xFF', 
		'\x100', '\a', '\x15', '\x2', '\x2', '\x100', '\x101', '\a', '\x1D', '\x2', 
		'\x2', '\x101', '\x109', '\x5', '>', ' ', '\x2', '\x102', '\x103', '\a', 
		'\x15', '\x2', '\x2', '\x103', '\x104', '\a', '\x1F', '\x2', '\x2', '\x104', 
		'\x109', '\x5', '>', ' ', '\x2', '\x105', '\x106', '\a', '\x15', '\x2', 
		'\x2', '\x106', '\x107', '\a', ' ', '\x2', '\x2', '\x107', '\x109', '\x5', 
		'>', ' ', '\x2', '\x108', '\xF9', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\x108', '\xFF', '\x3', '\x2', '\x2', 
		'\x2', '\x108', '\x102', '\x3', '\x2', '\x2', '\x2', '\x108', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x10B', '\b', ' ', '\x1', '\x2', '\x10B', '\x10C', '\a', '\x36', 
		'\x2', '\x2', '\x10C', '\x10D', '\x5', '>', ' ', '\x2', '\x10D', '\x10E', 
		'\a', '\x35', '\x2', '\x2', '\x10E', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x10F', '\x110', '\a', '\x34', '\x2', '\x2', '\x110', '\x114', '\x5', 
		'>', ' ', '\r', '\x111', '\x114', '\x5', '\x30', '\x19', '\x2', '\x112', 
		'\x114', '\x5', '@', '!', '\x2', '\x113', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x113', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x131', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\f', 
		'\f', '\x2', '\x2', '\x116', '\x117', '\a', '\x1C', '\x2', '\x2', '\x117', 
		'\x130', '\x5', '>', ' ', '\f', '\x118', '\x119', '\f', '\v', '\x2', '\x2', 
		'\x119', '\x11A', '\a', '\x1E', '\x2', '\x2', '\x11A', '\x130', '\x5', 
		'>', ' ', '\f', '\x11B', '\x11C', '\f', '\n', '\x2', '\x2', '\x11C', '\x11D', 
		'\a', ')', '\x2', '\x2', '\x11D', '\x130', '\x5', '>', ' ', '\v', '\x11E', 
		'\x11F', '\f', '\t', '\x2', '\x2', '\x11F', '\x120', '\a', '!', '\x2', 
		'\x2', '\x120', '\x130', '\x5', '>', ' ', '\n', '\x121', '\x122', '\f', 
		'\b', '\x2', '\x2', '\x122', '\x123', '\a', '#', '\x2', '\x2', '\x123', 
		'\x130', '\x5', '>', ' ', '\t', '\x124', '\x125', '\f', '\a', '\x2', '\x2', 
		'\x125', '\x126', '\a', '\"', '\x2', '\x2', '\x126', '\x130', '\x5', '>', 
		' ', '\b', '\x127', '\x128', '\f', '\x6', '\x2', '\x2', '\x128', '\x129', 
		'\a', '$', '\x2', '\x2', '\x129', '\x130', '\x5', '>', ' ', '\a', '\x12A', 
		'\x12B', '\f', '\x5', '\x2', '\x2', '\x12B', '\x12C', '\a', '%', '\x2', 
		'\x2', '\x12C', '\x130', '\x5', '>', ' ', '\x6', '\x12D', '\x12E', '\f', 
		'\xE', '\x2', '\x2', '\x12E', '\x130', '\a', '\x1A', '\x2', '\x2', '\x12F', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x12F', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x12F', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x124', '\x3', '\x2', '\x2', '\x2', '\x12F', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x12D', '\x3', '\x2', '\x2', '\x2', '\x130', '\x133', '\x3', '\x2', '\x2', 
		'\x2', '\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\t', 
		'\x2', '\x2', '\x2', '\x135', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x45', 'K', 'O', 'V', ']', '\x63', 'm', 'p', 'w', '\x83', '\x8A', '\x92', 
		'\x97', '\xAD', '\xB8', '\xBC', '\xC0', '\xC7', '\xCD', '\xD3', '\xD8', 
		'\xE0', '\xE9', '\x108', '\x113', '\x12F', '\x131',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Kys.Parser
